/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antgame;

import antgame.Turn.Left_Right;
import antgame.errors.InvalidSyntaxException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Jason
 */
public class WorldTest {

    ArrayList<Ant> ant = new ArrayList<>();

    public WorldTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test sense in the step method, of class World.
     * pass if the ant is being assign a proper state
     */
    @Test
    public void testSenseStep() throws IOException, FileNotFoundException, InvalidSyntaxException {
        System.out.println("Sense");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Sense.Dir sd = Sense.Dir.HERE;
        Instruction Sense = new Sense(sd,1,3,cond);
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(Sense);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 1;
        int result = a.state;
        assertEquals(expect, result);
    }

    /**
     * Test pickup in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    @Test
    public void testPickupStep() throws IOException, FileNotFoundException, InvalidSyntaxException {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction pick = new PickUp(2, 4); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(pick);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 4;
        int result = a.state;
        assertEquals(expect, result);
    }

    /**
     * Test drop in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    @Test
    public void testDropStep() throws IOException, FileNotFoundException, InvalidSyntaxException {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction drop = new Drop(5); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(drop);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 5;
        int result = a.state;
        assertEquals(expect, result);
    }

    /**
     * Test turn in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    @Test
    public void testTurnStep() throws IOException, FileNotFoundException, InvalidSyntaxException {
        System.out.println("stepTurn");
        AntGameGUI GUI = new AntGameGUI();
        int id = 0;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction turn = new Turn(Left_Right.LEFT, 4); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(turn);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 4;
        int result = a.state;
        assertEquals(expect, result);
    }
    /**
     * Test mark in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    public void testMarkStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction mark = new Mark(2, 9); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(mark);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 9;
        int result = a.state;
        assertEquals(expect, result);
    }

    /**
     * Test move in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    public void testMoveStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction move = new Move(8, 4); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(move);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 8;
        int result = a.state;
        assertEquals(expect, result);
    }
    
    
    
    
    /**
     * Test flip in step method, of class World.
     * pass if the ant is being assign a proper state
     */
        public void testFlipStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction flip = new Flip(2, 2, 4); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(flip);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect;
        if(instance.randomint(2) == 0)
            expect = 2;
        else
            expect = 4;
        int result = a.state;
        assertEquals(expect, result);
    }

     /**
     * Test unmark in step method, of class World.
     * pass if the ant is being assign a proper state
     */
    public void testUnMarkStep() {
        System.out.println("step");
        int id = 3;
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos,c);
        Instruction unmark = new Unmark(2, 9); 
        ArrayList<Instruction> red = new ArrayList<>();
        ArrayList<Ant> ant = new ArrayList<>();
        ant.add(a);
        red.add(unmark);
        instance.setRedBrain(red);
        instance.set_ant_at(pos, a);
        instance.setAnts(ant);
        a.setId(id);
        instance.step(id);
        int expect = 9;
        int result = a.state;
        assertEquals(expect, result);
    }

    /**
     * Test case food in cell_matches method, of class World.
     * pass if return ture when there are food in the cell
     * or false if there are no food
     */
    @Test
    public void testFoodCell_matches() {
        System.out.println("Food_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Food();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.set_food(5);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
    }

    @Test
    /**
     * Test case rock in cell_matches method, of class World.
     * pass if return ture if the cell is rocky
     * or false if the cell is not rocky
     */
    public void testRockCell_matches() {
        System.out.println("Rock_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Rock();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.setRocky();
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        System.out.println(result);
        assertTrue(result);
    }

    /**
     * Test case friend in cell_matches method, of class World.
     * pass if return ture when there are friendly ant in the cell
     * or false if there are not
     */
    @Test
    public void testFriendsCell_matches() {
        System.out.println("Friends_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
    }

    /**
     * Test foe in cell_matches method, of class World.
     * pass if return ture when there are foe in the cell
     * or false if there are not
     */
    @Test
    public void testFoeCell_matches() {
        System.out.println("Foe_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Foe();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
    }

    /**
     * Test case foewithfood in cell_matches method, of class World.
     * pass if return ture when there are foe with food in the cell
     * or false if there are not
     */
    @Test
    public void testFoeWithFoodCell_matches() {
        System.out.println("FoeWithFood_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new FoeWithFood();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.set_has_food(true);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
    }

    /**
     * Test case friendwithfood in cell_matches method, of class World.
     * pass if return ture when there are friend with food in the cell
     * or false if there are not
     */
    @Test
    public void testFriendWithFoodCell_matches() {
        System.out.println("Friends_with_food_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Friend();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, pos, c);
        a.set_has_food(true);
        pos.setAnt(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
    }

    /**
     * Test case mark in cell_matches method, of class World.
     * pass if return ture when there are match in the cell
     * or false if there are not
     */
    @Test
    public void testMarkCell_matches() {
        System.out.println("Mark_cell_matches");
        Cell pos = new Cell(2, 1);
        int x = 0;
        Cond cond = new Marker(x);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        pos.set_marker_at(c, x);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
    }

    /**
     * Test case foemarker in cell_matches method, of class World.
     * pass if return ture when there are foe marker in the cell
     * or false if there are not
     */
    @Test
    public void testFoeMarkCell_matches() {
        System.out.println("Foe_Mark_cell_matches");
        Cell pos = new Cell(2, 1);
        int x = 0;
        Cond cond = new FoeMarker();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(pos, c, x);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
    }

    /**
     * Test case home in cell_matches method, of class World.
     * pass if return ture when there are friendly anthill in the cell
     * or false if there are not
     */
    @Test
    public void testHomeCell_matches() {
        System.out.println("Home_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new Home();
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, pos, c);
        pos.set_anthill(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c);
        assertTrue(result);
    }

    /**
     * Test case foehome in cell_matches method, of class World.
     * pass if return ture when there are foe anthill in the cell
     * or false if there are not
     */
    @Test
    public void testFoeHomeCell_matches() {
        System.out.println("Foe_Home_cell_matches");
        Cell pos = new Cell(2, 1);
        Cond cond = new FoeHome();
        Color c = Color.RED;
        Color c1 = Color.BLACK;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, pos, c);
        pos.set_anthill(a);
        customWorld[2][1] = pos;
        boolean result = instance.cell_matches(pos, cond, c1);
        assertTrue(result);
    }

    /**
     * Test of adjacent_cell method, of class World.
     * check if this method returns the correct cell to be found
     */
    @Test
    public void testAdjacent_cell() {
        System.out.println("adjacent_cell");
        Cell p = new Cell(1, 1);
        int d = 0;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 1);
        Cell result = instance.adjacent_cell(p, d);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
    }

    /**
     * Test turnleft in turn method, of class World.
     * check if correct direction is being returned when turn left
     */
    @Test
    public void testLeftTurn() {
        System.out.println("Left turn");
        Turn.Left_Right lr = Turn.Left_Right.LEFT;
        int d = 2;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        int expResult = 1;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
    }

    /**
     * Test turnright in turn method, of class World.
     * check if correct direction is being returned when turn right
     */
    @Test
    public void testRightTurn() {
        System.out.println("Right turn");
        Turn.Left_Right lr = Turn.Left_Right.RIGHT;
        int d = 2;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        int expResult = 3;
        int result = instance.turn(lr, d);
        assertEquals(expResult, result);
    }

    /**
     * Test case here in sensed_cell method, of class World.
     * test if correct cell being sensed
     */
    @Test
    public void testHeadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.HERE;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = p;
        Cell result = instance.sensed_cell(p, d, sd);
        assertEquals(expResult, result);
    }

    /**
     * Test case ahead in sensed_cell method, of class World.
     * test if correct cell being sensed
     */
    @Test
    public void testAheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.AHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(3, 2);
        Cell result = instance.sensed_cell(p, d, sd);
//        System.out.println(result.getX());
        //        System.out.println("----------------------------------------------");
//        System.out.println(result.getY());        
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
        // TODO review the generated test code and remove the default call to fail.
    }

    /**
     * Test case leftahead in sensed_cell method, of class World.
     * test if correct cell being sensed
     */
    @Test
    public void testLeftaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.LEFTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 1);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
    }

    /**
     * Test case rightahead in sensed_cell method, of class World.
     * test if correct cell being sensed
     */
    @Test
    public void testRightaheadSensed_cell() {
        System.out.println("sensed_cell");
        Cell p = new Cell(2, 2);
        int d = 0;
        Sense.Dir sd = Sense.Dir.RIGHTAHEAD;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Cell expResult = new Cell(2, 3);
        Cell result = instance.sensed_cell(p, d, sd);
        System.out.println(result.getX());
        System.out.println(result.getY());
        assertEquals(expResult.getX(), result.getX());
        assertEquals(expResult.getY(), result.getY());
    }

    /**
     * Test of rocky method, of class World.
     * check if it returns true when giving the method a rocky cell
     */
    @Test
    public void testRocky() {
        System.out.println("rocky");
        Cell p = new Cell(2, 3);
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        p.setRocky();
        boolean expResult = true;
        boolean result = instance.rocky(p);
        assertEquals(expResult, result);
    }

    /**
     * Test of some_ant_is_at method, of class World.
     * check if it returns true when giving the method a cell with any ccolor of ant
     */
    @Test
    public void testSome_ant_is_at() {
        System.out.println("some_ant_is_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        p.setAnt(a);
        boolean expResult = true;
        boolean result = instance.some_ant_is_at(p);
        assertEquals(expResult, result);
    }

    /**
     * Test of ant_at method, of class World.
     * test if correct ant being accessed
     */
    @Test
    public void testAnt_at() {
        System.out.println("ant_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.set_ant_at(p, a);
        Ant expResult = a;
        Ant result = instance.ant_at(p);
        assertEquals(expResult, result);
    }

    /**
     * Test of clear_ant_at method, of class World.
     * check if the ant in the cell is being removed
     * pass if correct ant being removed
     */
    @Test
    public void testClear_ant_at() {
        System.out.println("clear_ant_at");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        instance.set_ant_at(p, a);
        instance.clear_ant_at(p);
        Ant expResult = null;
        Ant result = instance.ant_at(p);
    }

    /**
     * Test of ant_is_alive method, of class World.
     * check if an ant with particular id is being removed 
     * pass if returning true if ant being input is still alive
     */
    @Test
    public void testAnt_is_alive() {
        System.out.println("ant_is_alive");
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        int id = 0;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        //instance.addAnt(a);
        a.setId(id);
        instance.ants.add(a);
        boolean expResult = true;
        boolean result = instance.ant_is_alive(id);
        assertEquals(expResult, result);
    }

    /**
     * Test of find_ant method, of class World.
     * check ant is in which cell using id of ant
     * pass if correct cell being returned
     */
    @Test
    public void testFind_ant() {
        System.out.println("find_ant");
        int id = 0;
        Cell p = new Cell(2, 2);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        Ant a = new Ant(instance, p, c);
        //instance.addAnt(a);
        a.setId(id);
        instance.ants.add(a);
        Cell expResult = p;
        Cell result = instance.find_ant(id);
        assertEquals(expResult, result);
    }

    /**
     * Test of food_at method, of class World.
     * check the amount of food in the cell
     * pass if the amount of food is same as the amount of food set to the cell
     */
    @Test
    public void testFood_at() {
        System.out.println("food_at");
        Cell p = new Cell(3, 3);
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_food_at(p, 5);
        int expResult = 5;
        int result = instance.food_at(p);
        assertEquals(expResult, result);
    }

    /**
     * Test of anthill_at method, of class World.
     * check if the anthill in the cell have particular attribute
     * pass when returning true if inputed color is same as 
     * color of anthill in the cell
     */
    @Test
    public void testAnthill_at() {
        System.out.println("anthill_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        AntHill a = new AntHill(instance, p, c);
        boolean expResult = true;
        boolean result = instance.anthill_at(p, c);
        assertEquals(expResult, result);
    }

    /**
     * Test of set_marker_at method, of class World.
     * pass if marker is being set and stored in the particular cell
     */
    @Test
    public void testSet_marker_at() {
        System.out.println("set_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        boolean result = instance.check_marker_at(p, c, z);
        assertTrue(result);
    }

    /**
     * Test of clear_marker_at method, of class World.
     * pass if marker with particular id and color is being removed
     * in choosen cell
     */
    @Test
    public void testClear_marker_at() {
        System.out.println("clear_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        instance.clear_marker_at(p, c, z);
        boolean result = instance.check_marker_at(p, c, z);
        assertFalse(result);
    }

    /**
     * Test of check_any_marker_at method, of class World.
     * pass when return ture if the cell contain marker
     * with same color as the color being passed into the method
     */
    @Test
    public void testCheck_any_marker_at() {
        System.out.println("check_any_marker_at");
        Cell p = new Cell(3, 3);
        Color c = Color.RED;
        int z = 3;
        Cell[][] customWorld = new Cell[150][150];
        for (int i = 0; i < 150; i++) {
            for (int j = 0; j < 150; j++) {
                customWorld[i][j] = new Cell(i, j);
            }
        }
        World instance = new World(customWorld, ant);
        instance.set_marker_at(p, c, z);
        boolean result = instance.check_any_marker_at(p, c);
        assertTrue(result);
    }
}
